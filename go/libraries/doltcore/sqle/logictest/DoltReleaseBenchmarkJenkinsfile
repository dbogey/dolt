pipeline {
    agent none
    stages {
        stage('Test Dolt Release') {
            parallel {
                stage ("Benchmark Dolt at specified release and update Liquidata/dolt-sql-performance") {
                    agent {
                        kubernetes {
                            label "liquidata-inc-ld-build"
                        }
                    }
                    environment {
                        PATH = "${pwd()}/.ci_bin:${pwd()}/.ci_bin/node_modules/.bin:${env.PATH}"
                        // DOLT_VERSION = sh(returnStdout: true, script: "(git rev-parse HEAD | tr -d '\n')")
                        DOLT_RELEASE = "22b4e97ec5eaff9670f18522d0604af27ad11295" // like to pass this from the Jenkins UI
                        TEST_N_TIMES = 5 // like to pass this from the Jenkins UI
                        TMPDIR = "${pwd()}/tempDir"
                        CREDSDIR = "/home/jenkins/.dolt/creds"
                        DOLT_CREDS = credentials("system-account-dolthub-creds")
                        DOLT_GLOBAL_CONFIG = "/home/jenkins/.dolt/config_global.json"
                    }
                    steps {
                        dir ("sqllogictest") {
                            git url: "https://github.com/liquidata-inc/sqllogictest.git"
                        }
                        dir ("dolt-release") {
                            checkout([$class: 'GitSCM', branches: [[name: "${DOLT_RELEASE}"]],
                                 userRemoteConfigs: [[url: 'https://github.com/liquidata-inc/dolt.git']]])
                        }
                        dir ("dolt-release/go") {
                            sh "rm -rf $TMPDIR && mkdir $TMPDIR"
                            sh "go get -mod=readonly ./..."
                            sh "go build -mod=readonly -o ../../.ci_bin/dolt ./cmd/dolt/."
                        }
                        dir ("go/libraries/doltcore/sqle/logictest/main") {
                            sh "rm $DOLT_GLOBAL_CONFIG"
                            sh "dolt config --global --add user.name 'LiquidataSystemAccount'"
                            sh "dolt config --global --add user.email 'liquidatasys@gmail.com'"
                            sh "rm -rf .dolt && dolt init"
                            sh "rm -rf $CREDSDIR && mkdir $CREDSDIR"
                            sh "cat $DOLT_CREDS > /home/jenkins/.dolt/creds/5jl65iugbs7olde8n8qqgvujs1bhp8c84bopgi78n26is.jwk"
                            sh "dolt config --global --add user.creds 5jl65iugbs7olde8n8qqgvujs1bhp8c84bopgi78n26is"
                            sh "dolt config --global --add metrics.disabled true"
                            sh "rm -rf temp && mkdir temp"
                            script {
                                def j = env.TEST_N_TIMES.toInteger()
                                for (int i = 1; i <= j; ++i) {
                                    sh "go run . run ../../../../../../sqllogictest/test/select1.test > temp/results${i}.log"
                                    sh "go run . parse \"$DOLT_RELEASE\" temp/results${i}.log > temp/parsed${i}.json"
                                }
                            }
                        }
                        sh "rm -rf dolt-sql-performance && dolt clone Liquidata/dolt-sql-performance"
                        dir ("dolt-sql-performance") {
                            sh "dolt checkout tester"
                            script {
                                def j = env.TEST_N_TIMES.toInteger()
                                for (int i = 1; i <= j; ++i) {
                                    sh "dolt table import -u ld_dolt_results ../go/libraries/doltcore/sqle/logictest/main/temp/parsed${i}.json"
                                    sh "dolt add ld_dolt_results"
                                    sh "dolt commit -m \"update dolt sql performance results\""
                                }
                            }
//                            sh "dolt push origin tester"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            node ("liquidata-inc-ld-build") {
                cleanWs() // cleanup
            }
        }
    }
}